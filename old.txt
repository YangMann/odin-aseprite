gpl_parse_og :: proc(data: string, allocator := context.allocator) -> (parsed: gpl_palette, ok: bool, err: runtime.Allocator_Error) {
    split := strings.split_lines(data, allocator) or_return
    defer delete(split)

    if len(split) <= 1 || split[0] != "GIMP Palette" {
        return
    }
    for line in split[1:] {
        line := strings.trim_null(strings.trim_space(line))

        if len(line) < 1 || line[0] == '#' {
        }
        else if strings.has_prefix(line, "Channels") || strings.has_prefix(line, "channels") {
            if strings.has_suffix(line, "rgba") || strings.has_suffix(line, "RGBA") {
                parsed.rgba = true
            }
        } else if strings.has_prefix(line, "Name") || strings.has_prefix(line, "Name") {
            line = strings.trim_prefix(line, "name: ")
            parsed.name = strings.clone(strings.trim_prefix(line, "Name: "), allocator)

        } else if strings.has_prefix(line, "Colums") || strings.has_prefix(line, "colums") {
            line = strings.trim_prefix(line, "colums: ")
            n, n_ok := strconv.parse_int(strings.trim_prefix(line, "Colums: "))
            if !n_ok {
                return
            }
            parsed.colums = n
        } else {
            color: gpl_color
            line := line
            i := strings.index(line, " ")
            n, n_ok := strconv.parse_int(line[:i])
            if !n_ok {return}
            color.r = n

            line = strings.trim_left_space(line[i:])
            i = strings.index(line, " ")
            n, n_ok = strconv.parse_int(line[:i])
            if !n_ok {return}
            color.g = n

            line = strings.trim_left_space(line[i:])
            i = strings.index(line, " ")
            if i == -1 {i = len(line)-1}
            n, n_ok = strconv.parse_int(line[:i])
            if !n_ok {return}
            color.b = n

            if parsed.rgba {
                line = strings.trim_left_space(line[i:])
                i = strings.index(line, " ")
                if i == -1 {i = len(line)-1}
                n, n_ok = strconv.parse_int(line[:i])
                if !n_ok {return}
                color.a = n
            }
            color.name = line[i+1:]

            append(&parsed.colors, color)
        }
    }
    return parsed, true, .None
}


if h.color_depth == 32 { // RGBA
    pixel := make([]PIXEL_RGBA, cel.height*cel.width/4, allocator)
    for px in 0..<(cel.height*cel.width/4) {
        for value in 0..<4 {
            last = pos
            pos += size_of(BYTE)
            pixel[px][value] = data[pos]
        }
    }
    cel.pixel = PIXEL(pixel)

} else if h.color_depth == 16 { // Grayscale
    pixel := make([]PIXEL_GRAYSCALE, cel.height*cel.width/2, allocator)
    for px in 0..<(cel.height*cel.width/2) {
        for value in 0..<2 {
            last = pos
            pos += size_of(BYTE)
            cel.pixel[px][value] = data[pos]
        }
    }
    cel.pixel = PIXEL(pixel)

} else if h.color_depth == 8 { // Indexed
    pixel := make([]PIXEL_INDEXED, cel.height*cel.width, allocator)
    for px in 0..<(cel.height*cel.width) {
        last = pos
        pos += size_of(PIXEL_INDEXED)
        pixel[px] = data[pos]
    }
    cel.pixel = PIXEL(pixel)
}

parse_ud_property :: proc(old_last, old_pos: int, data: []u8, allocator := context.allocator) -> 
    (prop: UD_Property, last, pos: int, err: ASE_Unmarshal_Error) 
{
    last = old_last
    pos = old_pos

    last = pos
    pos += size_of(WORD)
    prop.name.length, _ = endian.get_u16(data[last:pos], .Little)

    last = pos
    pos += int(prop.name.length)
    prop.name.data = data[last:pos]

    last = pos
    pos += size_of(WORD)
    prop.type, _ = endian.get_u16(data[last:pos], .Little)

    prop.data, last, pos = parse_property_value(last, pos, prop.type, data[:], allocator) or_return

    return
}


get_chunk_from_type :: proc($T: typeid) -> (c: Chunk_Types)
where intrinsics.type_is_variant_of(Chunk_Data, T) {
    temp: T
    defer free(&temp)
    switch v in Chunk_Data(temp) {
    case Old_Palette_256_Chunk: c =.old_palette_256
    case Old_Palette_64_Chunk: c = .old_palette_64
    case Layer_Chunk: c = .layer
    case Cel_Chunk: c = .cel
    case Cel_Extra_Chunk: c = .cel_extra
    case Color_Profile_Chunk: c = .color_profile
    case External_Files_Chunk: c = .external_files
    case Mask_Chunk: c = .mask
    case Path_Chunk: c = .path
    case Tags_Chunk: c = .tags
    case Palette_Chunk: c = .palette
    case User_Data_Chunk: c = .user_data
    case Slice_Chunk: c = .slice
    case Tileset_Chunk: c = .tileset
    }
    return
}


unmarshal_chunks :: proc(data: []byte, buf: ^[dynamic]$T, allocator := context.allocator) -> (err: ASE_Unmarshal_Error)
where intrinsics.type_is_variant_of(Chunk_Data, T) {
    chunk := get_chunk_from_type(T)
    pos := size_of(DWORD)
    next := size_of(DWORD) + size_of(WORD)
    magic, _ := endian.get_u16(data[pos:next], .Little)

    if magic != 0xA5E0 {
        return .Bad_File_Magic_Number
    }

    pos = next
    next += size_of(WORD)
    frames, _ := endian.get_u16(data[pos:next], .Little)

    next += size_of(WORD) + size_of(WORD)

    pos = next
    next += size_of(WORD)
    color_depth, _ := endian.get_u16(data[pos:next], .Little)

    pos = next
    next += size_of(DWORD)
    flags, _ := endian.get_u32(data[pos:next], .Little)

    next += 110
    
    for frame in 0..<frames {
        next += size_of(DWORD)

        pos = next
        next += size_of(WORD)
        frame_magic, _ := endian.get_u16(data[pos:next], .Little)

        if frame_magic != 0xF1FA {
            return .Bad_Frame_Magic_Number
        }

        pos = next
        next += size_of(WORD)
        old_num_of_chunks, _ := endian.get_u16(data[pos:next], .Little)

        next += 4
        pos = next
        next += size_of(DWORD)
        num_of_chunks, _ := endian.get_u32(data[pos:next], .Little)

        frame_count: int
        if num_of_chunks == 0 {
            frame_count = int(old_num_of_chunks)
        } else {
            frame_count = int(num_of_chunks)
        }

        for _ in 0..<frame_count {
            c_start := next

            pos = next
            next += size_of(DWORD)
            c_size, _ := endian.get_u32(data[pos:next], .Little)

            pos = next
            next += size_of(WORD)
            t_c_type, _ := endian.get_u16(data[pos:next], .Little)
            c_type := Chunk_Types(t_c_type)

            if c_type != chunk {
                continue
            }

            switch c_type {
            case .old_palette_256:
                c := read_old_palette_256(data[next:int(c_size)]) or_return
                append(buf, c)
            case .old_palette_64:
                c := read_old_palette_64(data[next:int(c_size)]) or_return
                append(buf, c)
            case .layer:
                c := read_layer(data[next:int(c_size)]) or_return
                append(buf, c)
            case .cel:
                c := read_cel(data[next:int(c_size)]) or_return
                append(buf, c)
            case .cel_extra:
                c := read_old_palette_256(data[next:int(c_size)]) or_return
                append(buf, c)
            case .color_profile:
                c := read_color_profile(data[next:int(c_size)]) or_return
                append(buf, c)
            case .external_files:
                c := read_external_files(data[next:int(c_size)]) or_return
                append(buf, c)
            case .mask:
                c := read_mask(data[next:int(c_size)]) or_return
                append(buf, c)
            case .path:
                c := read_path(data[next:int(c_size)]) or_return
                append(buf, c)
            case .tags:
                c := read_tags(data[next:int(c_size)]) or_return
                append(buf, c)
            case .palette:
                c := read_palette(data[next:int(c_size)]) or_return
                append(buf, c)
            case .user_data:
                c := read_user_data(data[next:int(c_size)]) or_return
                append(buf, c)
            case .slice:
                c := read_slice(data[next:int(c_size)]) or_return
                append(buf, c)
            case .tileset:
                c := read_tileset(data[next:int(c_size)]) or_return
                append(buf, c)
            case .none:
            }
        } 
    }
    return
}